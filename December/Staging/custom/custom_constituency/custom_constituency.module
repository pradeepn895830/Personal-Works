<?php

define('CC_SEARCH_CONSTITUENCIES', 'http://project12.zeeme.in/constituency/services/get-constituency-test.php');
define('CC_SEARCH_STATES', 'http://project12.zeeme.in/constituency/services/get-state-constituencies.php');
define('CC_SEARCH_LOCATION_STATE', 'http://project12.zeeme.in/constituency/services/get-constituency-test-chintan.php');

/**
 * Implementation of hook_init()
 */

function custom_constituency_init(){
drupal_add_js(drupal_get_path('module', 'custom_constituency') . '/js/widget.refresh.js');
  global $user;
    //Allow Global Ctool js
	_ajax_register_include_modal();
	
    if(user_is_logged_in()){
        //Set DefaultConstituency in Session
        if(variable_get('userloginfirst', '')){  
            $js = "(function($){ $(document).ready(function(){ $('a#global-constituency-finder').trigger('click'); }); })(jQuery);";
			//Skip Default Constituency Chooser from Volunteer Registration and Raise an Issues
			if(arg(0) == 'node' && arg(1) == 'add' && (arg(2) == 'volunteer-registration' || arg(2) == 'issues')){
			   //$js = "(function($){ $(document).ready(function(){ /*$('a#global-choose-locality').trigger('click');*/ }); })(jQuery);";
			   $js = "(function($){ $(document).ready(function(){  })(jQuery);";
			}			
            drupal_add_js($js, 'inline');
            variable_del('userloginfirst');
        }
		if(empty($_SESSION['defaultCons']) && module_exists('ajax_register')){
            constituency_default_checklist(TRUE);
		}
        if(empty($_SESSION['defaultCons'])){
            drupal_add_js(drupal_get_path('module', 'custom_constituency') . '/js/constituency.checklist.js');
        }
		//Set This menu items under My Locality
		if(arg(0) == 'taxonomy' && is_numeric(arg(2))){
		   $js = "(function($){ 
		       $(document).ready(function(){
			       var path = '".url('setDefaulthome/'.arg(2))."';
  			       var menuItem = $('ul#main-menu').find('li.menu-1667 > a#setthis');
				   menuItem.removeClass('element-invisible');
				   menuItem.attr('href',path);
			   }) 
		   })(jQuery);";
		   if(!empty($_SESSION['defaultCons']) && $_SESSION['defaultCons'] != arg(2)){drupal_add_js($js, 'inline');}
		}
	}
	//Use IP Geoloc
	if(module_exists('ip_geoloc') && !isset($_SESSION['geolocation'])){
	    $location = ip_geoloc_get_visitor_location();
		if(isset($location['administrative_area_level_1']) && !empty($location['administrative_area_level_1'])){
		   $_SESSION['geolocation'] = $location['administrative_area_level_1'];
		}
		if(isset($location['locality']) && !empty($location['locality'])){
		   $_SESSION['geolocality'] = $location['locality'];
		}
	}	
    //Add Global Share toggle 
    drupal_add_js(drupal_get_path('module', 'custom_constituency') . '/js/sharethis.toggle.js');
	
	//Open Login Popup on DYI Pages
	if(user_is_anonymous()){
	   if(arg(0) == 'node' && is_numeric(arg(1)) && in_array(arg(1), array('8268','8269', '19310', '20936', '20919', '20938'))){
	      drupal_add_js(drupal_get_path('module', 'custom_constituency') . '/js/anonymous.volunteer.js');
	   }
	}

    // DNA Toaster for Delhi Constituencies
    /*if(arg(0) == 'taxonomy' && arg(1) == 'term' && in_array(arg(2), array(3,4,5,6,7,8,9))){
        $term = taxonomy_term_load(arg(2));
		$pathtrail = str_replace(' ', '-', strtolower($term->name));
	    drupal_add_js(array('dnatoaster' => array('consname' => strtoupper($term->name), 'pathtrail' => $pathtrail)), array('type' => 'setting'));
        drupal_add_js(drupal_get_path('module', 'custom_constituency') . '/js/modal.dnatoaster.js', array('type' => 'file', 'scope' => 'footer'));
	}*/	
}

/**
 * Implementation of hook_menu()
 */
function custom_constituency_menu(){
    $items = array();
	$items['consfinder/%/%ctools_js'] = array(
	    'page callback' => 'constituency_finder_page_callback',
		'page arguments' => array(1, 2),
	    'access arguments' => array('access content'),
		'delivery callback' => 'ajax_deliver',
        'type' => MENU_CALLBACK,		
	);
	$items['search-suggestion/%'] = array(
	   'page callback' => 'constituency_serch_suggestion',
       'page arguments' => array(1),
	   'access arguments' => array('access content'),
	   'type' => MENU_CALLBACK,
	);	
	$items['constituency-states'] = array(
	   'page callback' => 'constituency_state_list',
	   'access arguments' => array('access content'),
	   'type' => MENU_CALLBACK,
	);	
	$items['constituencydefault'] = array(
	   'page callback' => 'constituency_default_checklist',
	   'access arguments' => array('access content'),
	   'type' => MENU_CALLBACK,
	);	
	$items['defaulthome']  = array(
	   'page callback' => 'default_home',
	   'access arguments' => array('access content'),
	   'type' => MENU_CALLBACK,
	);
	$items['statecons/%/%/list']  = array(
	   'page callback' => 'get_state_constituencies',
	   'page arguments' => array(1,2),
	   'access arguments' => array('access content'),
	   'type' => MENU_CALLBACK,
	);	
	$items['setDefaulthome/%']  = array(
	   'page callback' => 'set_default_home',
	   'page arguments' => array(1),
	   'access callback' => 'user_is_logged_in',
	   'type' => MENU_CALLBACK,
	);	
  return $items;	
} 

/**
 * Implementation of hook_form_profile2_edit_PROFILE_TYPE_form_alter()
 * Set Default Constituency Value in user constituency table
 */
function custom_constituency_form_profile2_edit_main_form_alter(&$form, &$form_state){
	array_push($form['#submit'], 'set_default_constituency');
	if(isset($form['profile_main']['field_constituency']['en'])){
	    $form['profile_main']['field_constituency']['en']['#title'] = t('Locality');
	}
	//Validate First & Last Name
	$form['profile_main']['field_fname'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('validate_string');
	$form['profile_main']['field_lname'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('validate_string');
}

function validate_string($element, &$form_state){
   $name = $element['#value'];
   $pattern = '/^[A-Za-z]*$/';
   if(!preg_match($pattern, $name)){
      form_error($element,t('Please enter valid name'));
   }
}

function set_default_constituency($form, &$form_state){
	$profile = $form_state['values'];
	if(isset($profile['profile_main'])){
	   $uid = $profile['uid'];
	   if(isset($profile['profile_main']['field_constituency']) && !empty($profile['profile_main']['field_constituency'])){
	       $constituency = current($profile['profile_main']['field_constituency']);
		   if(!empty($constituency)){
		        $tid = $constituency[0]['tid'];
				$term = taxonomy_term_load($tid);
				$sql = 'SELECT * FROM users_constituency WHERE uid = :uid LIMIT 1';
				$result = db_query($sql, array(':uid'=>$uid));
				if($result->rowCount() >0 && $tid){
				    $changed = time();
				    db_query('UPDATE users_constituency SET tid = :tid, changed = :changed WHERE uid = :uid', array(':tid'=>$tid, ':changed' => $changed, ':uid' => $uid));
				 }
				else{
				   $changed = $created = time();
				   $sql = 'INSERT INTO users_constituency (uid, tid, created, changed) VALUES (:uid, :tid, :created, :changed)';
				   db_query($sql, array(':uid'=>$uid, ':tid' => $tid, ':created' => $created, ':changed' => $created));
                }
                //Update Session Values				
		        $_SESSION['defaultCons'] = $term->tid; $_SESSION['defaultConsName'] = $term->name;
		   }
		   else{
		      //To do Delete action
			  db_query('DELETE FROM users_constituency WHERE uid = :uid', array(':uid'=>$uid));
			  //Update Session Values				
		      $_SESSION['defaultCons'] = ''; $_SESSION['defaultConsName'] = '';
		   }
	   }
	}
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 */
function custom_constituency_form_user_profile_form_alter(&$form, &$form_state){
    global $user;
	//drupal_set_message('<pre>'.print_r($form,TRUE).'</pre>');
	$form['account']['mail']['#title'] = t('Email');
	$form['picture']['#title'] = t('Photo');
	$form['picture']['picture_upload']['#description'] = t('Formats: BMP, JPG, GIF, PNG');
    if($user->uid != 1){
	    $form['account']['mail']['#attributes'] = array('disabled'=>'disabled');
		unset($form['account']['mail']['#description']);
        $form['#attached']['js'] = array(drupal_get_path('module', 'custom_constituency') . '/js/constituency.profile.js' => array('type' => 'file', 'scope' => 'footer'));
	}
	$form['#submit'][] = 'custom_constituency_user_profile_form_submit';	
}

function custom_constituency_user_profile_form_submit($form, &$form_state) {
  global $user;
  drupal_goto('user/' . $user->uid);
}

function custom_constituency_form_user_pass_alter(&$form, &$form_state, $form_id){
	array_push($form['#submit'], 'set_form_redirect'); 
}

function set_form_redirect($form, &$form_state){
      $form_state['redirect'] = '<front>';
}


/**
 * Implementation of hook_form_alter()
 * Alter Issues, Photo Reel and Discussion node form
 */
function custom_constituency_form_alter(&$form, &$form_state, $form_id){
  global $user;
  
	$defaultCons = '';
	
	//Add label Number in Issue Form
    if($form_id == 'issues_node_form'){
	   $form['#attached']['js'][] = array('data'=>drupal_get_path('module', 'custom_constituency') . '/js/label.numbering.js','type'=>'file');
    }	
	
	if($form_id == 'photo_reel_node_form'){
	   $form['field_photo'][LANGUAGE_NONE]['#file_upload_title'] = t('Upload a Photo');
    }	
	
	//Allow node type
	$node_type = array('issues_node_form', 'photo_reel_node_form', 'forum_node_form' ,'news_node_form');
	if(!in_array($form_id, $node_type)){ return;}
	
    //Allow user type to overide deafult behaviour
	//Admin and Super Volunteer and $uid = 1
	if(array_key_exists(3, $user->roles) || array_key_exists(8, $user->roles) || $user->uid == 1){ return; }
	
	//Make Constituency Fild Read Only
    $form['field_constituency'][LANGUAGE_NONE]['#attributes'] = array('readonly' => 'readonly');
	//Add Choose Locality Options
	$addLocality = l(t('Change Locality'), 'consfinder/chooselocality/nojs', array('attributes' => array('class' => array('ctools-use-modal', 'ctools-modal-ctools-ajax-register-style'), 'id' => 'global-choose-locality')));
	$form['field_constituency'][LANGUAGE_NONE]['#suffix'] = (!user_is_anonymous())?$addLocality:'';
	//Unset Autopopulate Options
    unset($form['field_constituency'][LANGUAGE_NONE]['#autocomplete_path']);
	
	//Check if User Has Default Constituency
    if(isset($_SESSION['defaultConsName']) && !empty($_SESSION['defaultConsName'])){
	   $defaultCons = $_SESSION['defaultConsName'];
	}
	
	//Check if Locality value present in url
	if(isset($_REQUEST['loc']) && !empty($_REQUEST['loc'])){
	   $path = drupal_lookup_path('source',$_REQUEST['loc']);
	   $termId = str_replace('taxonomy/term/', '', $path);
	   if(is_numeric($termId)){
	      $term = taxonomy_term_load($termId);
		  $defaultCons = $term->name;
	   }
	}
	
    //Set the default Constituency value
	$node = $form['#node'];
	if(!isset($node->nid)){ //Don't Change Edit Form value 
	    $form['field_constituency'][LANGUAGE_NONE]['#default_value'] = $defaultCons;
	}
	
	
    //Hide Submit Button if user is anonymouse
	//Open Login Popup
	if(user_is_anonymous()) { 
	    $form['actions']['submit']['#attributes'] = array('disabled' => 'disabled');
		$form['#attached']['js'][] = array('data'=>drupal_get_path('module', 'custom_constituency') . '/js/anonymous.volunteer.js','type'=>'file');
    }	
} 

/**
 * Implementation of hook_node_access().
 */
function custom_constituency_node_access($node, $op, $account){
   if($op == 'create' && $account->uid == 0 && $node == 'issues')
  return NODE_ACCESS_ALLOW; 
} 


/*
* Implementation of hook_element_info_alter().
*/
function custom_constituency_element_info_alter(&$type) {
	if(isset($type['password_confirm'])){
		$type['password_confirm']['#process'][] = 'pass_label_process_password_confirm';
	}
}

function pass_label_process_password_confirm($element) {
  if ($element['#array_parents'][0] == 'pass') {
    $element['pass1']['#title'] = t('New password');
    //$element['pass2']['#title'] = 'Confirm new password';
  }
  return $element;
}

function default_home(){
	global $user;
        if(isset($_SESSION['defaultCons']) && !empty($_SESSION['defaultCons'])){
		    drupal_goto('taxonomy/term/'.$_SESSION['defaultCons']);
		}	
		$sql = 'SELECT * FROM users_constituency WHERE uid = :uid LIMIT 1';
        $result = db_query($sql, array(':uid' => $user->uid));
        $flag   = $result->rowCount();
        $record = $result->fetchObject();
        if($flag > 0 && !empty($flag)){ # Found? go to home loclaity
			error_log("HOME SET");
           	drupal_goto('taxonomy/term/'.$record->tid);
        }else{ // Else go to front page
           	error_log("FRONT DEFAULT NO HOME NO COOKIE");
			drupal_goto('<front>');
        }		
}

function constituency_finder_page_callback($type, $js){
    if(!$js){
	    drupal_goto('<front>');
	}
    // Include ctools modal plugin.
    ctools_include('modal');
	ctools_include('ajax');
	
	//Add custom js
    ctools_add_js('jquery.mousewheel', 'custom_constituency');
    ctools_add_js('jquery.jscrollpane', 'custom_constituency');
    ctools_add_css('jquery.jscrollpane', 'custom_constituency');
    //Set Form flag True to set default home page 
    $form_state = array('ajax' => TRUE, 'op' => TRUE, 'reload' => TRUE);

    // Array with ajax response.
    $commands = array();
	if($type == 'mylocality'){
	  $form_id  = (user_is_anonymous())?'user_login':'constituency_finder_form';
	  $commands = ctools_modal_form_wrapper($form_id, $form_state);
	}elseif($type == 'searchlocality'){
	  $form_state = array('ajax' => TRUE, 'op' => FALSE, 'btext' => TRUE, 'reload' => TRUE);
	  $commands = ctools_modal_form_wrapper('constituency_finder_form', $form_state);
    }elseif($type == 'addlocality'){
	  $form_state = array('ajax' => TRUE, 'op' => TRUE, 'reload' => FALSE);
	  $commands = ctools_modal_form_wrapper('constituency_finder_form', $form_state);
	}elseif($type == 'chooselocality'){
	  $form_state = array('ajax' => TRUE, 'op' => FALSE, 'reload' => FALSE);
	  $commands = ctools_modal_form_wrapper('constituency_finder_form', $form_state);
	}else{
      $commands = ctools_modal_form_wrapper('constituency_finder_form', $form_state);
	} 
	
    // If form was submited.
    if (!empty($form_state['executed'])) {
      $commands[] = ctools_ajax_command_reload();
    }
	//$commands[] = ajax_command_alert($type);
    return array('#type' => 'ajax', '#commands' => $commands);
}

function constituency_finder_form($form, &$form_state){
		$form = array();
		
		$form['#prefix'] = '<div id="ajax_wrraper_constituency" class="constituency-finder">';
		
		$form['#prefix'] .= '<div class="constituency-finder-header">';
		if(isset($form_state['storage']) && !empty($form_state['storage'])){
		    $form['#prefix'] .=    t('<h1 class="title">'.t('Your State: @state', array('@state'=>$form_state['keyword'])).'</h1>');
		    $form['#prefix'] .=     '<div class="description constituency-result">'.t('Here is the list of localities in your state and the areas within them. Scroll and select the locality you belong to', array('@state'=>$form_state['keyword'])).'</div>';
		}else{
		    $form['#prefix'] .=    '<h1 class="title">'.t('Please Select Your State').'</h1>';
		}
		$form['#prefix'] .= '</div>';
		
		//Form Wrapper ID for Ajax Process
		$form['id'] = array(
		   '#type' => 'hidden',
		   '#value' => 'ajax_wrraper_constituency',
		);
		
		if(isset($form_state['storage']) && !empty($form_state['storage'])){
		    $constituencies = $form_state['storage'];
			$options = array();
			$flag = TRUE;
			foreach($constituencies as $constituency =>  $assembly){
			   $assem = implode(', ',$assembly);
			   if((isset($_SESSION['geolocality']) && !empty($_SESSION['geolocality'])) && $flag){
			      if(strpos($constituency, $_SESSION['geolocality']) !== false){
				     $defaultConstituency = str_replace(' ', '-', strtolower($constituency));
                     //drupal_add_js(array('customConstituency' => array('defaultCons' => $defaultConstituency)), array('type' => 'setting'));
                     $form['#attached']['js'][] = array('data'=>array('customConstituency' => array('defaultCons' => $defaultConstituency)),'type'=>'setting');					 
					 $flag = FALSE;
				  }else{
				     //drupal_add_js(array('customConstituency' => array('defaultCons' => '')), array('type' => 'setting'));
					 $form['#attached']['js'][] = array('data'=>array('customConstituency' => array('defaultCons' => '')),'type'=>'setting');
				  }
			   }
			   $options[$constituency] = '<span class="cons-name">'. $constituency . '</span><span class="cons-assembly">' . $assem . '</span>';
			}
			$form['constituency'] = array(
			   '#type' => 'radios',
			   '#options' => $options,
			   '#requried' => TRUE,
			   //'#attributes' => array('onClick' => 'this.form.submit(function(event){event.prevenDefault();});'),
			);
		    $form['submit'] = array(
			   '#type' => 'submit',
			   '#value' => (isset($form_state['btext']) && $form_state['btext'])?t('View Locality'):t('Confirm locality'),
			   '#submit' => array('constituency_details'),
			   '#ajax' => array(
					'callback' => 'constituency_set_default',
					'wrraper' => 'ajax_wrraper_constituency',
                    //'event' => 'click',
				),
				'#suffix' => '<div id="error-message-loc" class="errMsg"></div>',
			);
		}	
		else{
			/*$form['key'] = array(
			   '#type' => 'textfield',
			   '#size' => 40,
			   '#attributes' => array('placeholder'=>t('Enter your locality or pin code')),
			   '#required' =>  TRUE,
			);*/
                        //check if user shared his location
		        $defaultLoc = (!empty($_SESSION['geolocation']))?array($_SESSION['geolocation'] => $_SESSION['geolocation']):array('Andaman and Nikobar' => 'Andaman and Nikobar');

			$form['key'] = array(
			   '#type' => 'select',
			   '#options' => array(''=>'-- Select Your State --') + drupal_map_assoc(constituency_state_list(FALSE)),
			   '#default_value' => variable_get('key', $defaultLoc),
			   '#requried' => TRUE,
			);			
			$form['search'] = array(
			   '#type' => 'submit',
			   '#value' => t('Search'),
			   '#submit' => array('constituency_details'),
			   '#ajax' => array(
					'callback' => 'constituency_ajax_callback',
					'wrraper' => 'ajax_wrraper_constituency',
                                        //'event' => 'click',
				),
				'#suffix' => '<div id="error-message" class="errMsg"></div>',
			);
		}
		//$form['#attached']['js'] = array(drupal_get_path('module', 'custom_constituency') . '/js/custom.constituency.js' => array('type'=>'file'));
		$form['#attached']['js'][] = array('data'=>drupal_get_path('module', 'custom_constituency') . '/js/custom.constituency.js','type'=>'file');
		$form['#suffix'] = '</div>';
	return $form;	
}

function constituency_finder_adv($form, &$form_state){
         $form['#prefix']  = '<div id="ajax_wrraper_constituency_adv" class="constituency-finder">';
         $form['#prefix'] .= '<div class="constituency-finder-adv-header">';
		 
		 if(isset($form_state['storage']) && !empty($form_state['storage'])){
		     $form['#prefix'] .=    t('<h1 class="title">'.t('Your State: @state', array('@state'=>$form_state['keyword'])).'</h1>');
		     $form['#prefix'] .=     t('<div class="description constituency-result">The locality/localities that match your search are:</div>', array('@state'=>$form_state['keyword']));
		 }
         else if(isset($form_state['state']) && !empty($form_state['state'])){
		     $form['#prefix'] .=     '<div class="divider"></div>';
		     $form['#prefix'] .=     '<div class="desc-text">'.t('or you can also search for your locality here').'</div>';
         }		 
		 else {	 
		     error_log("HERE");
		     $form['#prefix'] .=    t('<h1 class="title"><a href="javascript:void(0);" title="Click here" id="cfinder">'.t('Can\'t Find Your Locality?').'</a></h1>');
		}	 
		 $form['#prefix'] .= '</div>';
		 
		 //Form Wrapper ID for Ajax Process
		 $form['id'] = array(
		    '#type' => 'hidden',
		    '#value' => 'ajax_wrraper_constituency_adv',
		 );
		
		 if(isset($form_state['storage']) && !empty($form_state['storage'])){
		    $constituencies = $form_state['storage'];
			$options = array();
			foreach($constituencies as $constituency =>  $assembly){
			   $assem = implode(', ',$assembly);
			   $options[$constituency] = '<span class="cons-name">'. $constituency . '</span><span class="cons-assembly">' . $assem . '</span>';
			}
			/*$form['filter'] = array(
			   '#type' => 'textfield',
			   '#size' => 40,
			   '#attributes' => array('placeholder'=>t('Which locality do you belong to ?')),
			   '#access' =>  (count($options) > 3)?TRUE:FALSE,
			);*/			
			$form['constituency'] = array(
			   '#type' => 'radios',
			   '#options' => $options,
			   '#requried' => TRUE,
			);
		    $form['submit'] = array(
			   '#type' => 'submit',
			   '#value' => (isset($form_state['btext']) && $form_state['btext'])?t('View Locality'):t('Confirm locality'),
			   '#submit' => array('constituency_details'),
			   '#ajax' => array(
					'callback' => 'constituency_set_default',
					'wrraper' => 'ajax_wrraper_constituency_adv',
                                        //'event' => 'click',
				),
				'#suffix' => '<div id="error-message-loc" class="errMsg"></div>',
			);
		 }
		 else{
			 if(isset($form_state['state']) && !empty($form_state['state'])){
				$form['state'] = array(
				  '#type' => 'hidden',
				  '#value' => $form_state['state'],
				);
			   $form['key'] = array(
			     '#type' => 'textfield',
			     '#size' => 40,
			     '#attributes' => array('placeholder'=>t('Enter your locality or pin code')),
                 '#autocomplete_path' => 'search-suggestion/'.$form_state['state'], 
			     '#required' =>  TRUE,
			   );				
			 }else{
                            //check if user shared his location
		            $defaultLoc = (!empty($_SESSION['geolocation']))?array($_SESSION['geolocation'] => $_SESSION['geolocation']):array('Andaman and Nikobar' => 'Andaman and Nikobar');

			    $form['key'] = array(
				  '#type' => 'select',
				  '#options' => array(''=>'-- Select Your State --') + drupal_map_assoc(constituency_state_list(FALSE)),
				  '#default_value' => variable_get('key', $defaultLoc),
				  '#requried' => TRUE,
			    );			 
			 }
			 
			 $form['submit'] = array(
				'#type' => 'submit',
				'#value' => (!empty($form_state['state']))?t('Go'):t('Search'),
				'#submit' => array('constituency_details'),
				'#ajax' => array(
						'callback' => 'constituency_ajax_callback',
						'wrraper' => 'ajax_wrraper_constituency_adv',
                                                //'event' => 'click',
				 ),
			    '#suffix' => '<div id="error-message" class="errMsg"></div>',
			 );
			 //$form['#attributes'] = array('style'=>'display:none;');
		 }
		 //$form['#attached']['js'] = array(drupal_get_path('module', 'custom_constituency') . '/js/custom.constituency.js' => array('type'=>'file'));
		 $form['#attached']['js'][] = array('data'=>drupal_get_path('module', 'custom_constituency') . '/js/custom.constituency.js','type'=>'file');
		 $form['#suffix'] = '</div>';
    return $form;
}

function constituency_details($form, &$form_state){
    $keyword = (isset($form_state['values']['key']))?trim($form_state['values']['key']):'';
	$options = (isset($form_state['values']['constituency']))?trim($form_state['values']['constituency']):'';
	$defaultState = (isset($form_state['state']))?$form_state['state']:$keyword;
    if(isset($keyword) && !empty($keyword)){
	   $allowOp = ($form_state['values']['form_id'] == 'constituency_finder_adv')?constituency_serch_result($keyword, CC_SEARCH_LOCATION_STATE, $defaultState):constituency_serch_result($keyword, CC_SEARCH_STATES);
	   $form_state['storage'] = $allowOp;
	   $form_state['keyword'] = ($form_state['values']['form_id'] == 'constituency_finder_adv')?$defaultState:$keyword;
	}
	if(isset($options) && !empty($options)){
	   
	   $form_state['complete'] = $options;
	   //Exception for Constituency Name Dadra And Nagar Haveli
	   $options = str_replace('Dadra And Nagar Haveli', 'Dadra Nagar Haveli', $options);
	   $options = str_replace('Daman And Diu', 'Daman', $options);
	   $options = str_replace('Hardwar', 'Haridwar', $options);
	   
	   $term = taxonomy_get_term_by_name(trim($options), 'constituency');
	   $term = current($term);
	   //drupal_set_message('<pre>'.print_r($term->tid,TRUE).'</pre>');
	   if(isset($term->tid) && !empty($term->tid)){
	      //if op is True Set as Default constituency
		  if($form_state['op']){ users_default_constituency($term->tid);}
	      $path = drupal_get_path_alias('taxonomy/term/' . $term->tid);
	   }else{
	      $path = '<front>';
	   }  
	   $form_state['redirect'] = $path;
	}
	
    $form_state['rebuild'] = TRUE;
}

function constituency_ajax_callback($form, &$form_state){
    $wrapperId = $form_state['values']['id'];
	switch($wrapperId){
	    case 'ajax_wrraper_constituency':
			$commands[] = ajax_command_replace('#'.$wrapperId, drupal_render($form));
			if(isset($form_state['storage']) && !empty($form_state['storage'])){
			   $buttonText = (isset($form_state['btext']) && $form_state['btext'])?TRUE:FALSE;
			   $form_state = array('ajax' => TRUE, 'op' =>TRUE, 'state' => $form_state['keyword'], 'btext' => $buttonText);
			   $consAvdseach = drupal_build_form('constituency_finder_adv', $form_state);
			   $commands[] = ($form['op'])?ajax_command_css('#modalContent', array('top'=>'100px')):ajax_command_css('#modalContent', array('top'=>'300px'));
			   $commands[] = ajax_command_append('#modal-content', drupal_render($consAvdseach));
			}else{
			   $commands[] = ajax_command_html('#error-message', t('Please choose a state'));
            }			
		break;
		case 'ajax_wrraper_constituency_adv':
			if(isset($form_state['storage']) && !empty($form_state['storage']))
			   $commands[] = ajax_command_html('#modal-content', drupal_render($form));
			else{
			   $commands[] = ajax_command_replace('#'.$wrapperId, drupal_render($form));
               $commands[] = ajax_command_css('form', array('display'=>'block'));
               $commands[] = ajax_command_html('#error-message', t('Please enter a valid value.'));
            }
		break;
	}
  return array('#type' => 'ajax', '#commands' => $commands);
}

function constituency_set_default($form, &$form_state){
    ctools_include('ajax');
    $wrapperId = $form_state['values']['id'];
	if(isset($form_state['complete']) && !empty($form_state['complete'])){
	   if(!$form_state['reload']){
	      //Exception for Constituency Name Dadra And Nagar Haveli
	      $options = str_replace('Dadra And Nagar Haveli', 'Dadra Nagar Haveli', $form_state['complete']);
	      $options = str_replace('Daman And Diu', 'Daman', $form_state['complete']);
		  $options = str_replace('Hardwar', 'Haridwar', $options);
	      $commands[] = ctools_modal_command_dismiss();
	      $commands[] = ajax_command_invoke('#edit-field-pin-code-locality-und-0-value', 'val', array($options));
	      $commands[] = ajax_command_invoke('#edit-field-constituency-und', 'val', array($options));
	   }else{
	      $commands[] = ctools_ajax_command_redirect($form_state['redirect']);
	   }
	}else{
       $commands[] = ajax_command_replace('#'.$wrapperId, drupal_render($form));
	   $commands[] = ajax_command_html('#error-message-loc', t('Please select locality from the list'));
	}   
  return array('#type' => 'ajax', '#commands' => $commands);	
}

/**
 * Save Default Constituency For each User
 */
function users_default_constituency($tid){
    global $user;
	if($user->uid > 0){
	    $lang = language_default();
	    $userObj = user_load($user->uid);
		$profile = profile2_load_by_user($userObj, 'main');
		//Check if User has a Profile
		if(is_object($profile) && !empty($profile)){
		   $profile->field_constituency[LANGUAGE_NONE][0]['tid'] = $tid;
		}else{ 
           //Else Create user's Profile
		   $profile = profile2_create(array('type' => 'main', 'uid' => $userObj->uid));  
		   $profile->field_constituency[LANGUAGE_NONE][0]['tid'] = $tid;
  		}
		//INSERT CONSTITUENCY DETAILS
		$created = $changed = time();
        $sql = 'SELECT * FROM users_constituency WHERE uid = :uid LIMIT 1';
		$result = db_query($sql, array(':uid'=>$userObj->uid));
		
		if($result->rowCount() >0 && $tid){
		    db_query('UPDATE users_constituency SET tid = :tid, changed = :changed WHERE uid = :uid', array(':tid'=>$tid, ':changed' => $changed, ':uid' => $userObj->uid));
		}else{
			$changed = $created = time();
			$sql = 'INSERT INTO users_constituency (uid, tid, created, changed) VALUES (:uid, :tid, :created, :changed)';
			db_query($sql, array(':uid'=>$userObj->uid, ':tid' => $tid, ':created' => $created, ':changed' => $created));
        }		
		
		//Save & Update Profile
		$profile->bundle = 'main';
		profile2_save($profile);
		//Update Seesion values
		$term = taxonomy_term_load($tid);
		$_SESSION['defaultCons'] = $term->tid; $_SESSION['defaultConsName'] = $term->name;
	}
}

function set_default_home($tid){
    $term = taxonomy_term_load($tid);
	if($term && $term->vocabulary_machine_name == 'constituency'){
	  users_default_constituency($tid);
	  drupal_goto('taxonomy/term/'.$_SESSION['defaultCons']);
	}else
	  drupal_goto(current_path());
}



/**
 * Implements hook_user_login().
 */
function custom_constituency_user_login(&$edit, $account) {
  if ($account->access == 0) {
    // Trigger Constituency Popup first time
    variable_set('userloginfirst', TRUE);
  }
}


/**
 * Page Callback for default constituency
 */
function constituency_default_checklist($return = FALSE){
    global $user;
	$sql = 'SELECT * FROM users_constituency WHERE uid = :uid LIMIT 1';
	$result = db_query($sql, array(':uid' => $user->uid));
	$flag   = $result->rowCount();
	$record = $result->fetchObject(); 
	if($flag > 0 && !empty($flag)){
	   //SET DEFAULT CONSTITUENCY IN VARIABLE
	   $term = taxonomy_term_load($record->tid);
	   $_SESSION['defaultCons'] = $term->tid;
	   $_SESSION['defaultConsName'] = $term->name;
	   if($return){return true;}else{echo 1;}
	}
	else{
	   //SET DEFAULT CONSTITUENCY IN VARIABLE
	   $_SESSION['defaultCons'] = '';
	   if($return){return false;}else{echo 0;}
	}
} 
 
 
/**
 * Constituency Result From API
 */
function constituency_serch_result($keyword, $apiUrl = CC_SEARCH_CONSTITUENCIES, $string = NULL){
    $options = array();
	$postfield = array('q'=>$keyword);
	if($string){ $postfield['r'] = $string;}
	
        $channel = curl_init($apiUrl);
	curl_setopt($channel, CURLOPT_POST, true);
	curl_setopt($channel, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($channel, CURLOPT_POSTFIELDS, http_build_query($postfield));	
	$searchRes = curl_exec($channel);
	curl_close($channel); 

	$searchRes = str_replace("<pre>",'',$searchRes);// Bug in Priyas service returns a <pre>, so strip it
	$searchRes = json_decode($searchRes);
	foreach($searchRes as $result){
	  if(!empty($result->constituency)){
	    $options[$result->constituency] = explode(',', $result->assembly);
	  }
	}

    if(count($options)<1){
      return NULL;
	}

  return $options;
}

function constituency_serch_suggestion($state, $text){
    $options = array();
    $postfield = array('term' => $text, 'r' => $state);
	$apiUrl  = 'http://project12.zeeme.in/constituency/services/get-hint.php?';
    $apiUrl .= http_build_query($postfield);  

    $searchRes = drupal_http_request($apiUrl);
    $searchRes = json_decode($searchRes->data);
	foreach($searchRes as $result){
	  	if(!empty($result->value)){
	        $options[$result->value] = $result->value;
	  	}
	}
   drupal_json_output($options);
}

/**
 * Volunteer Badge API
 */
function volunteer_badge($uid, $status = FALSE){
    $options = $markup = '';
	$postfield = array('member_id' => $uid);
	$apiUrl  = 'http://volunteer.iamin.in/iframe-quiz/services/get-quiz-result?';
	$apiUrl .= http_build_query($postfield);
	$searchRes = drupal_http_request($apiUrl);
	
	//{"member_id":"1","badge_own":"Mast Mauji","knowledge_score":"0","passion_score":"0","status":"sucess"}

	//$searchRes->code = 200;


	if($searchRes->code == 200 && $searchRes->data){
	  $options = json_decode($searchRes->data);
	}else{
	  $options = new stdClass();
	  $options->status = 'failed';
	} 
	
    if($status)
	  return $options;

	{
		$options = new stdClass();
    
		$result = db_query('SELECT uq.uid, uq.result
	FROM users_quiz_result uq WHERE uq.uid = :uid', array(':uid' => $uid));
		
		if($result->rowCount() > 0)
		{
			foreach($result as $record)
			{
				$options->badge_own = $record->result;
				$options->status = 'sucess';
			}
		}
		else
		{
			$options->status = 'failed';
		}	
	}

	if ($uid == 867)
	{
		$options = new stdClass();
		$options->status = 'sucess';
		$options->badge_own = 'Swayam Sevak';
	}
	
	if ($uid == 1642)
        {
                $options = new stdClass();
                $options->status = 'sucess';
                $options->badge_own = 'Swayam Sevak';
        }

        if ($uid == 4176)
        {
                $options = new stdClass();
                $options->status = 'sucess';
                $options->badge_own = 'Adarsh Naagrik';
        }


        if ($uid == 1608)
        {
                $options = new stdClass();
                $options->status = 'sucess';
                $options->badge_own = 'Adarsh Naagrik';
        }

	if ($uid == 5478)
        {
                $options = new stdClass();
                $options->status = 'sucess';
                $options->badge_own = 'Swayam Sevak';
        }

	if ($uid == 4231)
        {
                $options = new stdClass();
                $options->status = 'sucess';
                $options->badge_own = 'Swayam Sevak';
        }

	if ($uid == 5154)
        {
                $options = new stdClass();
                $options->status = 'sucess';
                $options->badge_own = 'Kranti Kaari';
        }

        if ($uid == 867)
        {
                $options = new stdClass();
                $options->status = 'sucess';
                $options->badge_own = 'Swayam Sevak';
        }


	//Prepare markup for volunteer badge
    if($options->status == 'sucess'){ 
	   module_load_include('inc','pathauto','pathauto');
	   $markup  = '<div class="volunteer-badge-wrapper">';
	   $markup .=     '<div class="volunteer-badge-thumb" id="'.pathauto_cleanstring($options->badge_own).'"></div>';
	   $markup .=     '<div class="volunteer-badge-title"> Badge : '.$options->badge_own.'</div>';
	   $markup .= '</div>'; 
    }	
   return $markup;	
} 


/**
 * Constituency State List
 */
//function constituency_state_list($text, $json = TRUE){
function constituency_state_list($json = TRUE){
		$options = array();
		
		$query = db_select('taxonomy_term_data', 'td')
				->fields('td', array('name'))
				//->condition('td.name', db_like($text) .'%', 'LIKE')
				->condition('td.vid', 2)
				->distinct(TRUE)
				->orderBy('td.name', 'ASC');
				//->range(0,5);
		$results = $query->execute();

		foreach ($results as $row) {
			$options[$row->name] = check_plain($row->name);
		}
	if(!$json){
	   return $options;
    }	
    drupal_json_output($options);
}

/** 
 * Constituency State
 */
function get_constituency_state($cid){
    $query = db_select('field_data_field_state', 'fs')
	         ->fields('fs', array('field_state_tid'))
			 ->condition('fs.language', 'en')
			 ->condition('fs.bundle', 'constituency')
			 ->condition('fs.entity_type', 'taxonomy_term')
			 ->condition('fs.entity_id', $cid)
			 ->distinct(TRUE)
			 ->range(0,1);
	$result = $query->execute();
    $record = $result->fetchObject();
	$stateId = ($record->field_state_tid)?$record->field_state_tid:0;
  return $stateId;	
}

/**
 * Constituency visibility
 */
function constituency_visibility(){
    $flag = FALSE;
	if(arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))){
		$query = db_select('field_data_field_visibility', 'fv')
				 ->fields('fv', array('field_visibility_value'))
				 ->condition('fv.entity_id', arg(2))
				 ->distinct(TRUE)
				 ->range(0,1);
		$result = $query->execute();
		$record = $result->fetchObject();
		$flag = ($record->field_visibility_value == 1)?TRUE:FALSE;	
	}
  return $flag;	
}

/**
 * State Constituency Navigation
 */
function get_state_constituencies($stateId, $constituency){
     $options = array();
     $sql = 'SELECT td.tid FROM taxonomy_term_data td LEFT JOIN field_data_field_state fs ON fs.entity_id = td.tid WHERE td.vid = 3 AND (fs.entity_type = :entity_type AND fs.language = :lang ) AND field_state_tid = :stateId ORDER BY td.tid ASC';
	 $result = db_query($sql, array(':entity_type' => 'taxonomy_term', ':lang' => 'en', ':stateId' => $stateId));
	 $record = $result->fetchAll();
     foreach ($record as $key => $row) {
		$options[] = $row->tid;
	 }
	$index = array_search($constituency, $options);
	$next = '<a href="javascript:void(0)">Next</a>';
	$prev = '<a href="javascript:void(0)">Prev</a>';
	if ($index !== FALSE){
		if(isset($options[$index + 1]) && !empty($options[$index + 1])){
		   $url = url('taxonomy/term/'.$options[$index + 1], array('absolute'=>TRUE)); 
		   $next = '<a href="'.$url.'">Next</a>';
		}
		if(isset($options[$index - 1]) && !empty($options[$index - 1])){
		   $url = url('taxonomy/term/'.$options[$index - 1], array('absolute'=>TRUE));
		   $prev = '<a href="'.$url.'">Prev</a>';
		};
	}
	$items[] = array('data' => $prev, 'class' => array('pager-previous'));
	$items[] = array('data' => $next, 'class' => array('pager-next'));
    $html  = theme('item_list', array('items'=> $items, 'title'=> NULL, 'type'=>'ul', 'attributes' => array('class' => array('pager'))));
  return $html;
} 

/**
 * Implementation of hook_views_api
 */ 
function custom_constituency_views_api(){
	return array(
		'api' => 3,
	);
}

function custom_constituency_views_query_alter(&$view, &$query) {
  //drupal_set_message('<pre>'.print_r($view->current_display .' - '. $view->name,TRUE).'</pre>');
  //Conditional Contextual filter
  $viewName = $view->name;
  $displayName = $view->current_display;
  switch($viewName){
     case 'caught_on_camera':
	    if(in_array($displayName, array('block', 'page_coc')))
		  $query->where[0]['type'] = 'OR';
	 break;
	 case 'citizens_voice':
	    if(in_array($displayName, array('block', 'page')))
		  $query->where[0]['type'] = 'OR';
	 break;
	 case 'latest_issues':
	    if(in_array($displayName, array('block', 'page', 'block_previous_issues')))
		  $query->where[0]['type'] = 'OR';
	 break;
	 case 'discussion':
	    if(in_array($displayName, array('block', 'page', 'attachment_opinion', 'block_older')))
		  $query->where[0]['type'] = 'OR';
	 break;
	 case 'local_news':
	    if(in_array($displayName, array('block', 'page', 'block_older')))
		  $query->where[0]['type'] = 'OR';
	 break;
	 case 'photo_reel':
	    if(in_array($displayName, array('block', 'page_1')))
		  $query->where[0]['type'] = 'OR';
	 break;
  }
  
  
  /*if($view->name == 'member_of_parliament' && $view->current_display == 'entity_view_attendance'){
     $argA = arg(0);
     $argB = arg(1);
	 $field = 0;
     if($argA == 'node' && is_numeric($argB)){
        $node = node_load($argB);
	    $field = (isset($node->field_name[LANGUAGE_NONE][0]['tid']))?$node->field_name[LANGUAGE_NONE][0]['tid']:0;
     }     
     $view->query->add_table('field_data_field_name');
	 $view->query->add_where_expression("0","field_data_field_name.field_name_tid = :tid", array(':tid' => $field));
  }*/
}

function issues_block_visibility(){
	//return false;

	$access = FALSE;
        $arg1   = arg(0);
        $arg2   = arg(1);
        if($arg1 == 'node' && is_numeric($arg2)){
            $node = node_load($arg2);
                $access = ($node->type == 'issues' || $node->type == '')?TRUE:FALSE;
        }
        if($arg1 == 'latest-issues' || $arg1 == 'issue'){
            $access = TRUE;
        }
  return $access;


}
