<?php

/**
 * Implementation of hook_form()
 */
function custom_acknowledge_form($form, &$form_state){
		global $user;
		$form = array();
		$desc = (user_is_anonymous())?t('This locality page is under construction. Please provide your email id and we shall inform you when the page is LIVE. Thanks!'):t('This locality page is under construction. Do you want us to inform you as soon as this page is LIVE? ');
		$submit = (user_is_anonymous())?t('Submit'):t('Yes, Inform Me');
		$access = (user_is_anonymous())?TRUE:FALSE;
		$form['#prefix'] = '<div id="custom_acknowledge_wrapper">';
		$form['desc'] = array(
		   '#type' => 'item',
		   '#markup' => $desc,
		);
		$form['tid'] = array(
		   '#type' => 'hidden',
		   '#value' => intval($form_state['tid']),
		);
		$form['email'] = array(
		   '#type' => 'textfield',
		   '#title' => t('Enter your email id here'),
		   '#size' => 40,
		   '#default_value' => (user_is_logged_in())?variable_get('email', $user->mail):'',
		   '#required' => TRUE,
		   '#element_validate' => array('acknowledge_email_validate'),
		   '#access' => $access
		);
		$form['submit'] = array(
		   '#type' => 'submit',
		   '#value' => $submit,
		   '#submit' => array('custom_acknowledge_submit'),
		   '#ajax' => array(
			  'callback' => 'custom_acknowledge_callback',
			  'wrapper'  => 'custom_acknowledge_wrapper',
			  'event'    => 'click',    
		   ),
		   '#suffix' => '<div id="error-message" class="errMsg"></div>',
		);
		//Attached placeholder js
		$form['#attached']['js'][] = array('data' => drupal_get_path('module', 'custom_acknowledge') . '/js/custom-ack.placeholder.js', 'type' => 'file', 'scope' => 'footer');
		$form['#suffix'] = '</div>';
		$form['#attributes'] = array('class' => array('constituency-subscriber-form'));  
    return $form;
}


/**
 * Form Submit handler
 */
function custom_acknowledge_submit($form, &$form_state){
  
 if(!form_get_errors()){
     $changed = $created = time();
     $data = $form_state['values'];
	 $term = taxonomy_term_load($data['tid']);
	 
	 $subscriber = new stdClass();
	 $subscriber->mail = $data['email'];
	 $subscriber->consname = $term->name;
	 $subscriber->path = url('taxonomy/term/'.$term->tid, array('absolute' => TRUE));
	 $subscriber->created = $created;
	 $subscriber->changed = $changed;
	 
     
     $sql = 'INSERT INTO constituency_acknowledge (email, tid, created, changed) VALUES (:email, :tid, :created, :changed)';
     db_query($sql, array(':email' => $data['email'], ':tid' => $data['tid'], ':created' => $created, ':changed' => $changed));
     $form_state['storage'] = TRUE;
	 rules_invoke_event('custom_acknowledge_subscriber', $subscriber);
	 drupal_set_message(t('You will be informed once the constituency details are obtained!'));
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Callback function
 */
function custom_acknowledge_callback($form, &$form_state){
  ctools_include('ajax');
  
  if(isset($form_state['storage'])){
    $new_form_state['input'] = array();
    $new_form = drupal_build_form($form['#form_id'], $new_form_state);
    $commands[] = ajax_command_replace('#custom_acknowledge_wrapper', drupal_render($new_form));
    $commands[] = ajax_command_html('#error-message', theme('status_messages'));
    $commands[] = ctools_ajax_command_reload();
  }else{
    $commands[] = ajax_command_replace('#custom_acknowledge_wrapper', drupal_render($form));
    $commands[] = ajax_command_html('#error-message', theme('status_messages'));
  } 
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Validate Email Address
 */
function acknowledge_email_validate($element, &$form_state){
  $email = $element['#value'];
  if(!valid_email_address($email)){
     form_error($element,t('Please enter a valid email id.'));
  }else if(validate_subscriber($form_state['values']['email'], $form_state['values']['tid'])){
     form_error($element,t('You already have a Subscription.'));
  }
}

/**
 * Validate Existing Subscriber
 */
function validate_subscriber($mail, $constituency){
   $access = FALSE;
   $sql = "SELECT * FROM constituency_acknowledge WHERE email = :email AND tid = :tid LIMIT 1";
   $result = db_query($sql, array(':email' => $mail, ':tid' => $constituency));
   if($result->rowCount() > 0){ $access = TRUE; }
  return $access;
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 */
function custom_acknowledge_form_issues_node_form_alter(&$form, &$form_state, $form_id){
   //Add Custom submit handler
   array_unshift($form['actions']['submit']['#submit'], 'coming_soon_constituencies');
}

/**
 * Invoke Rule to acknowledge user if Raise an Issue Posted
 * in Coming Soon Constituency Page
 */
function coming_soon_constituencies($form, &$form_state){
    $data = $form_state['values'];
	if(!empty($data['uid']) && isset($data['field_constituency']['und'])){
	    $author = user_load($data['uid']); 
		$term = taxonomy_term_load($data['field_constituency']['und'][0]['tid']);
		//Validate Subscriber & Constituency
		if(!validate_subscriber($author->mail, $data['field_constituency']['und'][0]['tid']) && (isset($term->field_visibility['und']) && $term->field_visibility['und'][0]['value'] == 0)){
		    $changed = $created = time();
			$subscriber = new stdClass();
			$subscriber->mail = $author->mail;
			$subscriber->consname = $term->name;
			$subscriber->path = url('taxonomy/term/'.$term->tid, array('absolute' => TRUE));
			$subscriber->created = $created;
			$subscriber->changed = $changed;
			
			$sql = 'INSERT INTO constituency_acknowledge (email, tid, created, changed) VALUES (:email, :tid, :created, :changed)';
			db_query($sql, array(':email' => $subscriber->mail, ':tid' => $term->tid, ':created' => $created, ':changed' => $changed));
			rules_invoke_event('custom_acknowledge_subscriber', $subscriber);
		}
	}
} 