<?php

/**
 * Implementation of hook_menu()
 */
function custom_scraper_menu(){
    $items = array();
	
	$items['scrapecontent'] = array(
		'page callback' => 'drupal_get_form',
		'page arguments' => array('scrap_content_from'),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
   return $items;	
}


function scrap_content_from($form, &$form_state){

    $form_state['data'] = isset($form_state['data'])?$form_state['data']:'';
    $form['url'] = array(
	   '#title' => t('URL'),
	   '#type'  => 'textfield',
	   '#required' => TRUE,
	   '#element_validate' => array('scrap_content_url_validate'),
	   '#attributes' => (isset($form_state['data']) && !empty($form_state['data']))?array('readonly'=>TRUE):array(),
	);
	if(isset($form_state['data']) && !empty($form_state['data'])){
	   $form['title'] = array(
		 '#title' => t('Title'),
		 '#type' => 'textfield',
		 '#default_value' => variable_get('title',$form_state['data']['title']),
		 '#size' => 60,
		 '#required' => TRUE,
	   );
	   if(isset($form_state['data']['images']) && !empty($form_state['data']['images'])){
	      foreach($form_state['data']['images'] as $key=>$value){
		      $option[$key] = '<img height="50px" width="50px" src='.$key.' />';
		  }
		  $form['images'] = array(
		     '#type' => 'radios',
			 '#options' => $option,
		     '#tree' => TRUE,
		  );
	   }
	   $form['body']  = array(
         '#type' => 'textarea', 
         '#title' => t('Description'), 
         '#default_value' => variable_get('body',$form_state['data']['description']),
         '#cols' => 60, 
         '#rows' => 3,	   
	   );
	   $form['submit'] = array(
	     '#type'  => 'submit',
	     '#value' => t('Submit'), 
	     '#submit' => array('external_sites_submit'),
	   );
	}
	$display = (isset($form_state['data']) && !empty($form_state['data']))?'display:none;':'display:block;';
	$form['lookup'] = array(
	   '#type'  => 'submit',
	   '#value' => t('lookup'), 
	   '#submit' => array('external_sites_lookup'),
	   '#attributes' => array('style'=>$display),
	   '#ajax' => array(
			'callback' => 'external_sites_callback',
			'wrapper'  => 'ajax_wrraper_scarper',
			'method' => 'replace',
		),
	);
	$form['#prefix'] = '<div id="ajax_wrraper_scarper">';
	$form['#suffix'] = '</div>';
    return $form;
}

/**
 * Submit Callback
 */
function external_sites_submit($form,&$form_state){
    global $user;
	$file = FALSE;
    //drupal_set_message('<pre>'.print_r($form_state['values'],TRUE).'</pre>');
	$data = $form_state['values'];
	
	if(isset($data['images']) && !empty($data['images'])){
	   $image = file_get_contents($data['images']); // string
	   $file = file_save_data($image, 'public://newsimage/localnews.jpg',FILE_EXISTS_RENAME);
	}
	
    //Preapare Node Object
		 $node = new stdClass();
		$node->type = 'news';
		node_object_prepare($node);
		//Set Node Title
		$node->title    = $data['title'];
		//Set Node Author
		$node->uid = $user->uid;
		//Set Node Language
		$node->language = LANGUAGE_NONE;
		//Body Text UTF8
		$body = iconv("UTF-8", "ISO-8859-1//TRANSLIT", $data['body']);
		$node->body[$node->language][0]['value']   = $body;
		$node->body[$node->language][0]['safe_value'] = text_summary($data['body']);

		//Set File Field
		if($file && isset($file->fid)){
		    $node->field_news_images[$node->language][0]['fid'] = $file->fid;
		}  
		//Set Field Url
		$node->field_sourceurl[$node->language][0]['value'] = $data['url'];


	node_save($node);
    drupal_set_message('Local News Created successfully.');	
	$form_state['rebuild'] = FALSE;
}

/**
 * Url Lookup callback 
 */
function external_sites_lookup($form,&$form_state){
    $form_state['data'] = scaper_link_request_contents($form_state['values']['url']);
	//drupal_set_message('<pre>'.print_r($form_state['data'],TRUE).'</pre>');

    $form_state['rebuild'] = TRUE;
}

/**
 * Ajax Callback
 */
function external_sites_callback($form, $form_state){
    $commands[] = ajax_command_replace('#ajax_wrraper_scarper', drupal_render($form));
    return array('#type' => 'ajax', '#commands' => $commands);
} 

/** 
 * Url Field Validation
 */
function scrap_content_url_validate($element, &$form_state){
   if(!preg_match( '/^(http|https):\/\/[a-z0-9_]+([\-\.]{1}[a-z_0-9]+)*\.[_a-z]{2,5}'.'((:[0-9]{1,5})?\/.*)?$/i' ,$element['#value'])){
       form_error($element, t('Enter a valid url source.'));
   }
}



/**
 * Logs an error into the database.
 *
 * @param $error
 *   The error string to store into the WATCHDOG table.
 */
function custom_scraper_log_error($error) {
  watchdog('custom_scraper', '!error', array('!error' => $error), WATCHDOG_WARNING);
}

function custom_scraper_include_library($file, $library) {
  if (module_exists('libraries') && file_exists(libraries_get_path($library) . "/$file")) {
    require_once DRUPAL_ROOT . '/' . libraries_get_path($library) . "/$file";
  }
  elseif (file_exists(drupal_get_path('module', 'custom') . "/libraries/$file")) {
    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'custom') . "/libraries/$file";
  }
  else {
    return FALSE;
  }
  return TRUE;
}

function scaper_link_request_contents($url, $options = array()){
 //Merge the default options.
  $options += array(
    'cached' => TRUE,
    'max_redirects' => 3,
    'timeout' => 30,
    'max_imagesize' => '512K',
    'min_imagesize' => 0,
    'hash_extra' => FALSE,
    'cache_duration' => 9676800,
  );

  $data = array(
    'images' => array(),
    'title' => $url,
    'description' => '',
  );
  
  
 timer_start(__FUNCTION__); 
  
	$result = drupal_http_request($url, array('timeout' => $options['timeout']));
	if ($result->code != 200) {
		custom_scraper_log_error(t("Could not connect to @url, HTTP error @error", array('@error' => $result->code, '@url' => $url)));
		return $data;
	}
  
	$page_url = $url;
	if (in_array($result->code, array(301, 302, 307))) {
	   $page_url = $result->redirect_url;
	   $data['title'] = $page_url;
	}

  if (stripos($result->headers['content-type'], 'image') !== FALSE) {
    $images = array();
    if (($imagesize = scraper_link_validate_filesize($page_url, $options['max_imagesize'], $options['min_imagesize'], ($options['timeout'] - timer_read(__FUNCTION__) / 1000))) != -1) {
      $images[$page_url] = $imagesize;
    }
	$data['images'] = $images;
  }
   else {
    scraper_link_detect_charset($result->data);

    $document = new DOMDocument();
    if (@$document->loadHTML($result->data) === FALSE) {
      custom_scraper_log_error(t("Could not parse the content on @url", array('@url' => $url)));
      return $data;
    }
	
	
	$xpath         = new DOMXPath($document);

    //Get title of the page.
    $titles        = @$xpath->evaluate("//title");
    $data['title'] = trim($titles->length > 0 ? $titles->item(0)->nodeValue : $data['title']);
    //Get description of the page.
    $descriptions  = @$xpath->evaluate("//meta[@name='description']");
    $data['description'] = trim($descriptions->length > 0 ? $descriptions->item(0)->getAttribute('content') : $data['description']);
	if ($data['description']) {
      $hrefs         = @$xpath->evaluate("/html/body//img");
      $images = array();
	  module_load_include('inc', 'custom_scraper', 'url_to_absolute');
      /*if (!custom_scraper_include_library('url_to_absolute.inc', 'url_to_absolute')) {
        custom_scraper_log_error(t("Could not find url_to_absolute.inc file in the libraries folder"));
        return $data;
      }*/

      for ($i = 0; $i < $hrefs->length; $i++) {
        $image_url = $hrefs->item($i)->getAttribute('src');
        if (!isset($image_url) || empty($image_url)) {
          continue;
        }
        $abs_url = url_to_absolute($page_url, $image_url);
		//$images[$abs_url] = $imagesize;
        if ($abs_url && ($imagesize = scraper_link_validate_filesize($abs_url, $options['max_imagesize'], $options['min_imagesize'], ($options['timeout'] - timer_read(__FUNCTION__) / 1000))) != -1) {
          $images[$abs_url] = $imagesize;
        }
        if (($options['timeout'] - timer_read(__FUNCTION__) / 1000) <= 0) {
          custom_scraper_log_error(t("Request timed out for @url", array('@url' => $url)));
          break;
        }
      }
      asort($images);
      $images = array_reverse($images, TRUE);
      $data['images'] = $images;
    }
  }

  //drupal_set_message('<pre>'.print_r($data,TRUE).'</pre>');
  return $data;
}




function scraper_link_validate_filesize($file_url, $max_size = 0, $min_size = 0, $timeout = 10, $max_redirects = 3) {
  $options = array(
    'method' => 'HEAD',
    'max_redirects' => $max_redirects,
    'timeout' => $timeout,
  );

  $result = drupal_http_request($file_url, $options);
  $max_size = parse_size($max_size);
  $min_size = parse_size($min_size);
  if ($result->code == 200 && (!$max_size || (isset($result->headers['content-length']) && $result->headers['content-length'] < $max_size)) && (!$min_size || (isset($result->headers['content-length']) && $result->headers['content-length'] > $min_size))) {
    return isset($result->headers['content-length']) ? $result->headers['content-length'] : 0;
  }
  return -1;
}


function scraper_link_detect_charset(&$html_content) {
  if (function_exists('mb_detect_encoding')) {
    preg_match('~meta.*?charset=([-a-z0-9_]+)~i', $html_content, $charset);
    if (isset($charset[1])) {
      $html_content = mb_convert_encoding($html_content, 'HTML-ENTITIES', $charset[1]);
      return FALSE;
    }

    $charset = mb_detect_encoding($html_content);
    if ($charset) {
      $head_pos = mb_strpos($html_content, '<head>');
      if (FALSE == $head_pos) {
        $head_pos = mb_strpos($html_content, '<HEAD>');
      }
      if (FALSE !== $head_pos) {
        $head_pos += 6;
        $html_content = mb_substr($html_content, 0, $head_pos) . '<meta http-equiv="Content-Type" content="text/html; charset=' . $charset . '">' . mb_substr($html_content, $head_pos);
      }
      $html_content = mb_convert_encoding($html_content, 'HTML-ENTITIES', $charset);
      return TRUE;
    }
  }

  return FALSE;
}
 
  