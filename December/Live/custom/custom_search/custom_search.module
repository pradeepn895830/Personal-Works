<?php



/**
 * Implementation of hook_menu_alter().
 */
function custom_search_menu_alter(&$items){
    $items['user/%user/edit']['title'] = t('Account Settings'); 
    $items['user/%user/edit']['type'] = MENU_CALLBACK; 
	 
	 // To change Messages Menu tabs into menu callbacks
    $items['messages']['type'] = MENU_CALLBACK;
    $items['messages/new']['type'] = MENU_CALLBACK;
	$items['messages/sent']['type'] = MENU_CALLBACK;
	$items['messages/list']['type'] = MENU_CALLBACK;
	$items['messages/view/%privatemsg_thread']['type'] = MENU_CALLBACK;
	
	$items['messages/sent']['title'] = t("Test sent");
	$items['messages/list']['title'] = t("Test list");
}

/**
 * Implementation of hook_menu().
 */
function custom_search_menu(){
    $items = array();
	$items['constituencysearch/%ctools_js/%'] = array(
	    'page callback' => 'constituency_list_page',
	    'page arguments' => array(1, 2),
	    'access arguments' => array('access content'),
	    'delivery callback' => 'ajax_deliver',
        'type' => MENU_CALLBACK,		
	);
   return $items;	
}
 
/**
 * Page Callback for Search String
 */
function constituency_list_page($js, $keyword){
    if(!$js){
	    drupal_goto('<front>');
	}
    // Include ctools modal plugin.
    ctools_include('modal');
    ctools_include('ajax');
	
    //Add custom js
    ctools_add_js('jquery.mousewheel', 'custom_constituency');
    ctools_add_js('jquery.jscrollpane', 'custom_constituency');
    ctools_add_css('jquery.jscrollpane', 'custom_constituency');
    //Set form Storage to populate list of constituency
    //Set flag false do not save value for default home page from here
    $storage  = constituency_serch_result($keyword, CC_SEARCH_STATES);

    $form_state = array('ajax' => TRUE, 'storage' => $storage, 'keyword' => $keyword, 'op'=>FALSE, 'btext' => TRUE, 'reload' => TRUE);
    
	// Array with ajax response.
    $commands = array();
    $commands = ctools_modal_form_wrapper('constituency_finder_form', $form_state);
	
	//Append Can't find your constituency form 
	$form_state = array('ajax' => TRUE, 'state' => $keyword, 'op' =>FALSE, 'btext' => TRUE, 'reload' => TRUE);
	$consAvdseach = drupal_build_form('constituency_finder_adv', $form_state);
	$commands[] = ajax_command_append('#modal-content', drupal_render($consAvdseach));
	
    // If form was submited.
    if (!empty($form_state['executed'])) {
      $commands[] = ctools_ajax_command_reload();
    }
    return array('#type' => 'ajax', '#commands' => $commands);
} 

/**
 * Implementation of hook_form().
 */
function custom_search_form($form, &$form_state){

		_ajax_register_include_modal();
		$form = array();
		$form['markup'] = array(
		   '#type' => 'item',
		   '#markup' => t('<h1>Stay Informed, Get Involved. Connect to Your Locality, Online.</h1>'),
		);
		//check if user shared his location
		$defaultLoc = (!empty($_SESSION['geolocation']))?array($_SESSION['geolocation'] => $_SESSION['geolocation']):array('Andaman and Nikobar' => 'Andaman and Nikobar');

		$form['key'] = array(
		   '#type' => 'select',
		   '#options' => array(''=>'-- Select your State --') + drupal_map_assoc(constituency_state_list(FALSE)),
		   '#default_value' => variable_get('key', $defaultLoc),
		   '#requried' => TRUE,
		);
		$form['submit'] = array(
		   '#type' => 'submit',
		   '#value' => t('Go'),
                   '#submit' => array('custom_search_form_submit'),
                   '#ajax' => array(
                      'callback' => 'custom_search_form_callback',
                      'wrapper'  => 'custom_search_form_wrapper',
                      'event' => 'click',
                    ),
			'#suffix' => '<div id="error-message" class="errMsg"></div>',		
		);
        if(isset($form_state['storage']) && !empty($form_state['storage'])){
		    $form['link'] = array(
			   '#type' => 'item',
			   '#markup' => l(t('Locality Finder'), 'constituencysearch/nojs/'.$form_state['storage'], 
                                           array('attributes' => 
                                              array(
                                                'class' => array('ctools-use-modal', 
                                                     'ctools-modal-ctools-ajax-register-style',
                                                     'element-invisible'
                                                 ),
                                                'id' => 'global-constituency-search'))),
		                  
		    );
        }
		
        $form['#prefix']  = '<div id="custom_search_form_wrapper" style="display:none;">';
        $form['#prefix'] .=   '<div class="findConstituency"><div class="wrapper"><div class="closeBtn">X</div>';
        $form['#suffix'] = '</div></div></div>';
        $form['#attached']['js'] = array(drupal_get_path('module', 'custom_search') . '/js/custom-search.js');
	    if(module_exists('ip_geoloc') && empty($_SESSION['geolocation'])){
	       //Add GEOlocation API
           $form['#attached']['js'][] = array('data' => drupal_get_path('module', 'custom_search') . '/js/seach.location.js', 'type' => 'file', 'scope' => 'footer');
	    }

	return $form;	
}

function explore_localities_form($form, &$form_state){
        $markup = (isset($form_state['markup']))?t('Start by connecting with your Locality'):t('Learn more about your locality, online!');
		_ajax_register_include_modal();
		$form = array();
		$form['markup'] = array(
		   '#type' => 'item',
		   '#markup' => '<h1>'. $markup .'</h1>',
		);
		//check if user shared his location
		$defaultLoc = (!empty($_SESSION['geolocation']))?array($_SESSION['geolocation'] => $_SESSION['geolocation']):array('Andaman and Nikobar' => 'Andaman and Nikobar');

		$form['key'] = array(
		   '#type' => 'select',
		   '#options' => array(''=>'-- Select your State --') + drupal_map_assoc(constituency_state_list(FALSE)),
		   '#default_value' => variable_get('key', $defaultLoc),
		   '#requried' => TRUE,
		);
		$form['submit'] = array(
		   '#type' => 'submit',
		   '#value' => t('Start Here'),
           '#submit' => array('custom_search_form_submit'),
                '#ajax' => array(
                'callback' => 'explore_localities_form_callback',
                'wrapper'  => 'explore_localities_form_wrapper',
                'event' => 'click',
            ),
			'#suffix' => '<div id="error-message" class="errMsg"></div>',
		);
        if(isset($form_state['storage']) && !empty($form_state['storage'])){
		    $form['link'] = array(
			   '#type' => 'item',
			   '#markup' => l(t('Locality Finder'), 'constituencysearch/nojs/'.$form_state['storage'], 
                                           array('attributes' => 
                                              array(
                                                'class' => array('ctools-use-modal', 
                                                     'ctools-modal-ctools-ajax-register-style',
                                                     'element-invisible'
                                                 ),
                                                'id' => 'explore-localities-search'))),
		                  
		    );
        }
		if(module_exists('ip_geoloc') && empty($_SESSION['geolocation'])){
		   //Add GEOlocation API
           $form['#attached']['js'][] = array('data' => drupal_get_path('module', 'custom_search') . '/js/seach.location.js', 'type' => 'file', 'scope' => 'footer');
		}
        $form['#prefix']  = '<div id="explore_localities_form_wrapper">';
        $form['#prefix'] .=   '<div class="findConstituency"><div class="wrapper">';
        $form['#suffix'] = '</div></div></div>';

	return $form;	
}

function  custom_search_form_submit($form, &$form_state){
    $keyword = trim($form_state['values']['key']);
    $form_state['storage'] = $keyword;
    $form_state['rebuild'] = TRUE;
}

function custom_search_form_callback($form, &$form_state){
    ctools_include('ajax');
    $commands[] = ajax_command_replace('#custom_search_form_wrapper', drupal_render($form));
    if(isset($form_state['storage']) && !empty($form_state['storage'])){
       $commands[] = ajax_command_invoke('#global-constituency-search', 'click');
    }else{
       $commands[] = ajax_command_invoke('#custom_search_form_wrapper', 'show');
	   $commands[] = ajax_command_html('#error-message', t('Please choose a state'));
    }
    return array('#type' => 'ajax', '#commands' => $commands);      
}

function explore_localities_form_callback($form, &$form_state){
    ctools_include('ajax');
    $commands[] = ajax_command_replace('#explore_localities_form_wrapper', drupal_render($form));
    if(isset($form_state['storage']) && !empty($form_state['storage'])){
       $commands[] = ajax_command_invoke('#explore-localities-search', 'click');
    }else{
	   $commands[] = ajax_command_html('#error-message', t('Please choose a state'));
    }
    return array('#type' => 'ajax', '#commands' => $commands);      
}

/**
 * Implementation of hook_form_alter().
 */
function custom_search_form_alter(&$form, &$form_state, $form_id){
   global $user;
    //Hide Comment Title and Your Name Field	
	if($form_id == 'comment_node_forum_form' || $form_id == 'comment_node_issues_form' || $form_id == 'comment_node_issues_from_app_form'){
	   //Hide Comment Author Field
	   $form['author']['#access'] = FALSE;
	   //Rename Comment Save Button
	   $form['actions']['submit']['#value'] = t('Comment');
	   //Add User Image in comment form
       if(user_is_logged_in()){
            $account = user_load($user->uid);
			$image = theme('user_picture', array('account' =>$account));
	   }
       else{
	       $path = file_build_uri('/sites/default/files/pictures/dummy_face.jpg');
		   $image = '<div class="user-picture"><img src="/sites/default/files/pictures/dummy_face.jpg" alt="image" width="50px;"/></div>';
       }	   
       $form['picture'] = array(
            '#type' => 'item',
            '#markup' => $image,
            '#weight' => -1,
       );
	   
	   //Trigger login link
	   if(user_is_anonymous()){
	      $form['#attached']['js'][] = array('data'=>drupal_get_path('module', 'custom_search') . '/js/custom-login.js','type'=>'file');
		  unset($form['actions']['submit']['#ajax']);
	   }

	}
	if($form_id == 'user_register_form'){
        unset($form['account']['mail']['#description']);
        unset($form['account']['pass']['#description']);
		
	}
	if($form_id == 'project_node_form'){
	   $argA = arg(3);
	   if(isset($argA) && is_numeric($argA)){
	      $term = taxonomy_term_load($argA);
		  $state = current($term->field_state);
		  $form['field_constituency'][LANGUAGE_NONE]['#default_value'] = $term->name;
		  $form['field_constituency'][LANGUAGE_NONE]['#attributes'] = array('readonly'=>TRUE);
		  $form['field_state'][LANGUAGE_NONE]['#default_value'] = $state[0]['tid'];
		  $form['field_state'][LANGUAGE_NONE]['#attributes'] = array('readonly'=>TRUE);
	   }
	}
	// Private messages form
	if($form_id == 'privatemsg_new' && isset($_GET['aname'])){
		$form['recipient']['#value'] = isset($_GET['aname']) ? $_GET['aname'] : '';
		$form['recipient']['#attributes'] = array('readonly'=>'readonly');
	}	
	
}

/**
 *Implimentation of hook_theme()
 */
function custom_search_theme($existing, $type, $theme, $path){
    $path = drupal_get_path('module','custom_search').'/templates';
	return array(
	  'landing_header' => array(
	     'variables' => array('com'=>NULL),
		 'template'  => 'landing-header',
		 'path' => $path
	  ),
	  'landing_home' => array(
	     'variables' => array('com'=>NULL),
		 'template'  => 'landing-home',
		 'path' => $path
	  ),
	  'issue_campaign' => array(
	     'variables' => array('com'=>NULL),
		 'template'  => 'issue-campaign',
		 'path' => $path
	  ),
	  'volunteer_campaign' => array(
	     'variables' => array('com'=>NULL),
		 'template'  => 'volunteer-campaign',
		 'path' => $path
	  )
	);
} 

/**
 * Implementation of hook_block_info().
 */
function custom_search_block_info(){
    $blocks = array();
	$blocks['custom_search'] = array('info'  => t('Home Page Search block'),'cache' => DRUPAL_NO_CACHE);
	$blocks['explore_localities'] = array('info'  => t('Explore Localities'),'cache' => DRUPAL_NO_CACHE);
	$blocks['search_localities'] = array('info'  => t('Search Localities'),'cache' => DRUPAL_NO_CACHE);
	$blocks['search_localities_mp_page'] = array('info'  => t('Search Localities MP Page'),'cache' => DRUPAL_NO_CACHE);
	$blocks['landing_header'] = array('info'  => t('Landing Header'),'cache' => DRUPAL_NO_CACHE);
	$blocks['issue_campaign'] = array('info'  => t('Issue Campaign'),'cache' => DRUPAL_NO_CACHE);
	$blocks['volunteer_campaign'] = array('info'  => t('Volunteer Campaign'),'cache' => DRUPAL_NO_CACHE);
	$blocks['landing_home'] = array('info'  => t('Landing Home'),'cache' => DRUPAL_NO_CACHE);
	$blocks['mp_messages'] = array('info'  => t("Volunteer -MP\'s Messages"),'cache' => DRUPAL_NO_CACHE);
   return $blocks;	
} 


/**
 * Implementation of hook_block_view().
 */
function custom_search_block_view($delta=''){
    $block = array();
	switch($delta){
		case 'custom_search':
			$block['subject'] = t('Home Page Search');
			$block['content'] = drupal_render(drupal_get_form('custom_search_form'));
		break;
		case 'explore_localities':
			$block['subject'] = t('Explore Localities');
			$block['content'] = drupal_render(drupal_get_form('explore_localities_form'));
		break;
		case 'search_localities':
			$block['subject'] = t('Search Localities');
			$block['content'] = drupal_render(drupal_get_form('explore_localities_form'));
		break;
		case 'search_localities_mp_page':
			$block['subject'] = t('Search Localities MP Page');
			$block['content'] = drupal_render(drupal_get_form('explore_localities_form'));
		break;
		case 'landing_header':
		   global $language;
		    $js = array(
			    array('data' => array('landingheader' => array('language' => $language->language)), 'type' => 'setting'),
			    array('data' => drupal_get_path('module', 'custom_search') . '/js/landing.header.js', 'type' => 'file', 'scope' => 'footer')
		    );
			$block['subject'] = t('Landing Header');
			$block['content'] = array('#markup' => theme('landing_header'), '#attached' => array('js' => $js));
		break;
		case 'issue_campaign':
			$block['subject'] = t('Issue Campaign');
			$block['content'] = array('#markup' => theme('issue_campaign'));
		break;
		case 'volunteer_campaign':
			$block['subject'] = t('Volunteer Campaign');
			$block['content'] = array('#markup' => theme('volunteer_campaign'));
		break;
		case 'landing_home':
			$block['subject'] = t('Landing Home');
			$block['content'] = array('#markup' => theme('landing_home'));
		break;
		case 'mp_messages':
			$block['subject'] = t("Volunteer -MP's Messages");
			$block['content'] = mp_messages();
		break;
	}
   return $block;	
}

function mp_messages() {
	$node_arg = explode("/", current_path());
	$linkButton = "";
	if ($node_arg[0] == 'node' && is_numeric($node_arg[1])){
		$nid = $node_arg[1];
		$node = (array) node_load($nid);
		$mp_uid = $node['uid'];
		$linkButton = l("View MP's Messages", 'messages/'.$mp_uid.'/list');
	}
	return $linkButton;
}
 
